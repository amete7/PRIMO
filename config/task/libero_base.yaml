# observation related
# seq_len: ${algo.skill_block_size}
# obs_seq_len: ${algo.frame_stack}
# frame_stack: 1

suite_name: libero
benchmark_name: LIBERO_10
mode: all
# todo: not sure exactly how to handle this for train / eval split. will deal with later
n_tasks: 10
rollouts_per_env: 50

# TODO: this assumes that all images have the same shape and there is one proprio input which makes
# things much cleaner
img_height: 128
img_width: 128
shape_meta:
  action_dim: 7
  proprio_shape:
    - 7
    - 3
    - 2
  proprio_inputs:
    - joint_states
    - ee_pos
    - gripper_states
  image_shape: 
    - 3
    - ${task.img_height}
    - ${task.img_width}
  image_inputs:
    - agentview_rgb
    - eye_in_hand_rgb

# build_dataset(data_prefix, benchmark_name, benchmark_name, seq_len, obs_seq_len, obs_modality):
dataset:
  _target_: quest.utils.libero_utils.build_dataset
  data_prefix: ${data_prefix}
  benchmark_name: ${task.benchmark_name}
  mode: ${task.mode}
  seq_len: ${algo.dataset.seq_len}
  frame_stack: ${algo.dataset.frame_stack}
  obs_seq_len: ${algo.dataset.obs_seq_len}
  obs_modality:
    rgb: ["agentview_rgb", "eye_in_hand_rgb"]
    depth: []
    low_dim: ["joint_states", "ee_pos", "gripper_states"]
  load_obs: ${training.load_obs}
  task_embedding_format: ${algo.task_embedding_format}

env_runner:
  _target_: quest.env_runner.libero_runner.LiberoRunner
  env_factory:
    _target_: quest.utils.libero_utils.LiberoWrapper
    _partial_: true 
    frame_stack: ${algo.frame_stack}
    img_height: ${task.img_height}
    img_width: ${task.img_width}
    obs_modality: ${task.dataset.obs_modality}
    obs_key_mapping: ${task.obs_key_mapping}
    device: ${device}
  benchmark_name: ${task.benchmark_name}
  mode: ${task.mode}
  rollouts_per_env: ${rollout.rollouts_per_env}
  num_parallel_envs: ${rollout.num_parallel_envs}
  max_episode_length: ${rollout.max_episode_length}
  fps: 24
  debug: false
  task_embedding_format: ${algo.task_embedding_format}
  
obs_key_mapping:
  agentview_rgb: agentview_image
  eye_in_hand_rgb: robot0_eye_in_hand_image
  gripper_states: robot0_gripper_qpos
  joint_states: robot0_joint_pos
  ee_pos: robot0_eef_pos