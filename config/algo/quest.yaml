policy:
  _target_: quest.algos.quest.QueST
  autoencoder:
    _target_: quest.algos.quest_modules.skill_vae.SkillVAE
    action_dim: 4
    encoder_dim: 256
    decoder_dim: 256
    skill_block_size: ${task.seq_len}

    encoder_heads: 4
    encoder_layers: 2
    decoder_heads: 4
    decoder_layers: 4

    attn_pdrop: 0.1
    use_causal_encoder: true
    use_causal_decoder: true

    vq_type: "fsq" # "vq" or "fsq"
    fsq_level: [8,5,5,5]
    codebook_dim: 512 # only used for vq
    codebook_size: 1024 # only used for vq

    kernel_sizes: [5,3,3] # conv module will have 3 layers with kernel sizes 5,3,3
    strides: [2,2,1] # conv module will have 3 layers with strides 2,2,1
  policy_prior:
    _target_: quest.algos.quest_modules.skill_gpt.SkillGPT
    action_dim: ${task.shape_meta.action_dim}
    start_token: 1000
    offset_layers: 0
    offset_hidden_dim: 512
    offset_dim: ${eval:'${task.shape_meta.action_dim}* ${task.seq_len}'}
    vocab_size: 1000
    block_size: 16
    n_layer: 6
    n_head: 6
    n_embd: 384
    attn_pdrop: 0.1
    embd_pdrop: 0.1
    beam_size: 5 # value of k for top k sampling
    temperature: 1.0 # temperature for sampling
    device: ${device}
  image_encoder_factory:
    _target_: quest.algos.utils.rgb_modules.ResnetEncoder
    _partial_: true
    input_shape: ${task.shape_meta.image_shape}
    output_size: ${algo.obs_emb_dim}
    pretrained: false
    freeze: false
    remove_layer_num: 4
    no_stride: false
    language_fusion: 'none'
  proprio_encoder:
    _target_: quest.algos.utils.mlp_proj.MLPProj
    input_size: ${task.shape_meta.proprio_dim}
    output_size: ${algo.proprio_emb_dim}
    num_layers: 1
  # TODO: this assumes that all images have the same shape
  image_aug:
    _target_: quest.algos.utils.data_augmentation.DataAugGroup
    aug_list:
      - _target_: quest.algos.utils.data_augmentation.BatchWiseImgColorJitterAug
        input_shape: ${task.shape_meta.image_shape}
        brightness: 0.3
        contrast: 0.3
        saturation: 0.3
        hue: 0.3
        epsilon: 0.1
      - _target_: quest.algos.utils.data_augmentation.TranslationAug
        input_shape: ${task.shape_meta.image_shape}
        translation: 4
  loss_fn:
    _target_: torch.nn.L1Loss
  optimizer_factory:
    _target_: torch.optim.AdamW
    _partial_: true
    lr: 0.0001
    betas: [0.9, 0.999]    
    weight_decay: 0.0001
  scheduler_factory:
    _target_: torch.optim.lr_scheduler.CosineAnnealingLR
    _partial_: true
    eta_min: 1e-5
    last_epoch: -1
    T_max: ${training.n_epochs}
  stage: ${stage}
  n_tasks: ${task.n_tasks}
  cat_obs_dim: ${eval:'${algo.obs_emb_dim} + ${algo.proprio_emb_dim}'}
  l1_loss_scale: ${algo.l1_loss_scale}
  action_horizon: ${algo.action_horizon}
  shape_meta: ${task.shape_meta}
  device: ${device}

name: quest

# Put hyperparameters that are susceptible to change here
proprio_emb_dim: 128
obs_emb_dim: 256 # from resnet_out_dim to this value using MLP
l1_loss_scale: 0
action_horizon: 2 # how many predicted actions to execute
# skill_block_size: 32 # this is input sequence length to encoder